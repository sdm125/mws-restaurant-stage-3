var _this = this;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Common database helper functions.
 */

var DBHelper = function () {
  function DBHelper() {
    _classCallCheck(this, DBHelper);
  }

  _createClass(DBHelper, null, [{
    key: 'getLocalDatabase',


    /**
     * Cache restaurant JSON in indexDB
     */
    value: function getLocalDatabase() {
      return idb.open('restaurant-reviews-data', 1, function (upgradeDb) {
        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });
        upgradeDb.createObjectStore('reviews', { keyPath: "id", autoIncrement: true });
        upgradeDb.createObjectStore('offline-temp', { keyPath: "id", autoIncrement: true });
      });
    }

    /**
     * Fetch all restaurants.
     */

  }, {
    key: 'fetchRestaurants',
    value: function fetchRestaurants(callback) {
      fetch(DBHelper.DATABASE_URL + '/restaurants/').then(function (response) {
        if (!response.ok) throw Error(response.statusText);
        return response.json();
      }).then(function (restaurants) {
        callback(null, restaurants);
        DBHelper.getLocalDatabase().then(function (db) {
          var tx = db.transaction('restaurants', 'readwrite');
          var restaurantsStore = tx.objectStore('restaurants');

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = restaurants[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _restaurant = _step.value;

              restaurantsStore.put(_restaurant);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      }).catch(function (error) {
        // Use restaurant JSON from indexDB if fetch fails
        DBHelper.getLocalDatabase().then(function (db) {
          var tx = db.transaction('restaurants');
          var restaurantsStore = tx.objectStore('restaurants');

          return restaurantsStore.getAll();
        }).then(function (restaurants) {
          callback(null, restaurants);
        });
      });
    }

    /**
     * Fetch all reviews for a restaurant.
     */

  }, {
    key: 'fetchRestaurantReviews',
    value: function fetchRestaurantReviews(id, callback) {
      // fetch all restaurants with proper error handling.
      fetch(DBHelper.DATABASE_URL + '/reviews/?restaurant_id=' + id).then(function (response) {
        if (!response.ok) throw Error(response.statusText);
        return response.json();
      }).then(function (reviews) {
        callback(null, reviews);
        DBHelper.getLocalDatabase().then(function (db) {
          var tx = db.transaction('reviews', 'readwrite');
          var reviewsStore = tx.objectStore('reviews');

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = reviews[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var review = _step2.value;

              reviewsStore.put(review);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        });
      }).catch(function (error) {
        // Use restaurant JSON from indexDB if fetch fails
        DBHelper.getLocalDatabase().then(function (db) {
          var tx = db.transaction('reviews');
          var reviewsStore = tx.objectStore('reviews');

          return reviewsStore.getAll();
        }).then(function (reviews) {
          reviews = reviews.filter(function (review) {
            return review.restaurant_id === id;
          });
          callback(null, reviews);
        });
      });
    }

    /**
     * Fetch a restaurant by its ID.
     */

  }, {
    key: 'fetchRestaurantById',
    value: function fetchRestaurantById(id, callback) {
      // fetch all restaurants with proper error handling.
      DBHelper.fetchRestaurants(function (error, restaurants) {
        if (error) {
          callback(error, null);
        } else {
          var _restaurant2 = restaurants.find(function (r) {
            return r.id == id;
          });
          if (_restaurant2) {
            // Got the restaurant
            callback(null, _restaurant2);
          } else {
            // Restaurant does not exist in the database
            callback('Restaurant does not exist', null);
          }
        }
      });
    }

    /**
     * Fetch restaurants by a cuisine type with proper error handling.
     */

  }, {
    key: 'fetchRestaurantByCuisine',
    value: function fetchRestaurantByCuisine(cuisine, callback) {
      // Fetch all restaurants  with proper error handling
      DBHelper.fetchRestaurants(function (error, restaurants) {
        if (error) {
          callback(error, null);
        } else {
          // Filter restaurants to have only given cuisine type
          var results = restaurants.filter(function (r) {
            return r.cuisine_type == cuisine;
          });
          callback(null, results);
        }
      });
    }

    /**
     * Fetch restaurants by a neighborhood with proper error handling.
     */

  }, {
    key: 'fetchRestaurantByNeighborhood',
    value: function fetchRestaurantByNeighborhood(neighborhood, callback) {
      // Fetch all restaurants
      DBHelper.fetchRestaurants(function (error, restaurants) {
        if (error) {
          callback(error, null);
        } else {
          // Filter restaurants to have only given neighborhood
          var results = restaurants.filter(function (r) {
            return r.neighborhood == neighborhood;
          });
          callback(null, results);
        }
      });
    }

    /**
     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.
     */

  }, {
    key: 'fetchRestaurantByCuisineAndNeighborhood',
    value: function fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {
      // Fetch all restaurants
      DBHelper.fetchRestaurants(function (error, restaurants) {
        if (error) {
          callback(error, null);
        } else {
          var results = restaurants;
          if (cuisine != 'all') {
            // filter by cuisine
            results = results.filter(function (r) {
              return r.cuisine_type == cuisine;
            });
          }
          if (neighborhood != 'all') {
            // filter by neighborhood
            results = results.filter(function (r) {
              return r.neighborhood == neighborhood;
            });
          }
          callback(null, results);
        }
      });
    }

    /**
     * Fetch all neighborhoods with proper error handling.
     */

  }, {
    key: 'fetchNeighborhoods',
    value: function fetchNeighborhoods(callback) {
      // Fetch all restaurants
      DBHelper.fetchRestaurants(function (error, restaurants) {
        if (error) {
          callback(error, null);
        } else {
          // Get all neighborhoods from all restaurants
          var _neighborhoods = restaurants.map(function (v, i) {
            return restaurants[i].neighborhood;
          });
          // Remove duplicates from neighborhoods
          var uniqueNeighborhoods = _neighborhoods.filter(function (v, i) {
            return _neighborhoods.indexOf(v) == i;
          });
          callback(null, uniqueNeighborhoods);
        }
      });
    }

    /**
     * Fetch all cuisines with proper error handling.
     */

  }, {
    key: 'fetchCuisines',
    value: function fetchCuisines(callback) {
      // Fetch all restaurants
      DBHelper.fetchRestaurants(function (error, restaurants) {
        if (error) {
          callback(error, null);
        } else {
          // Get all cuisines from all restaurants
          var _cuisines = restaurants.map(function (v, i) {
            return restaurants[i].cuisine_type;
          });
          // Remove duplicates from cuisines
          var uniqueCuisines = _cuisines.filter(function (v, i) {
            return _cuisines.indexOf(v) == i;
          });
          callback(null, uniqueCuisines);
        }
      });
    }

    /**
     * Restaurant page URL.
     */

  }, {
    key: 'urlForRestaurant',
    value: function urlForRestaurant(restaurant) {
      return './restaurant.html?id=' + restaurant.id;
    }

    /**
     * Restaurant image URL.
     */

  }, {
    key: 'imageUrlForRestaurant',
    value: function imageUrlForRestaurant(restaurant, size) {
      if (restaurant.photograph) {
        if (size === 'sm') {
          return '/img/' + restaurant.photograph + '_400.jpg';
        }
        return '/img/' + restaurant.photograph + '_800.jpg';
      } else {
        if (size === 'sm') {
          return '/img/default_400.jpg';
        }
        return '/img/default_800.jpg';
      }
    }

    /**
     * Map marker for a restaurant.
     */

  }, {
    key: 'mapMarkerForRestaurant',
    value: function mapMarkerForRestaurant(restaurant, map) {
      var marker = new google.maps.Marker({
        position: restaurant.latlng,
        title: restaurant.name,
        url: DBHelper.urlForRestaurant(restaurant),
        map: map,
        animation: google.maps.Animation.DROP });
      return marker;
    }

    /**
     * Add a restaurant review.
     */

  }, {
    key: 'addRestaurantReview',
    value: function addRestaurantReview(restaurant, name, rating, comments) {
      fetch(DBHelper.DATABASE_URL + '/reviews/', {
        method: 'post',
        body: JSON.stringify({
          "restaurant_id": restaurant.id,
          "name": name,
          "rating": rating,
          "comments": comments
        })
      }).then(function (response) {
        if (!response.ok) throw Error(response.statusText);else if (response.status === 201) location.reload();
        console.log('review created: ', data);
      }).catch(function (error) {
        DBHelper.getLocalDatabase().then(function (db) {
          var tx = db.transaction('reviews', 'readwrite');
          var reviewsStore = tx.objectStore('reviews');
          var timestamp = new Date().getTime() / 1000;

          reviewsStore.put({
            restaurant_id: restaurant.id,
            createdAt: timestamp,
            name: name,
            rating: rating,
            comments: comments
          });

          tx = db.transaction('offline-temp', 'readwrite');
          var offlineTemp = tx.objectStore('offline-temp');

          if (!navigator.onLine) {
            offlineTemp.put({
              restaurant_id: restaurant.id,
              createdAt: timestamp,
              name: name,
              rating: rating,
              comments: comments
            });
          }

          location.reload();
        });
      });
    }

    /**
     * Add a restaurant review.
     */

  }, {
    key: 'uploadOfflineReviews',
    value: function uploadOfflineReviews() {
      DBHelper.getLocalDatabase().then(function (db) {
        var tx = db.transaction('offline-temp');
        var offlineTemp = tx.objectStore('offline-temp');
        return offlineTemp.getAll();
      }).then(function (reviews) {
        if (reviews) {
          var promiseArr = [];
          for (var i = 0; i < reviews.length; i++) {
            promiseArr.push(fetch(DBHelper.DATABASE_URL + '/reviews/', {
              method: 'post',
              body: JSON.stringify(reviews[i])
            }));
          }
          Promise.all(promiseArr).then(function () {
            DBHelper.getLocalDatabase().then(function (db) {
              db.transaction('offline-temp', 'readwrite').objectStore('offline-temp').clear();
            });
          });
        }
      });
    }

    /**
     * Add restaurant as favorite.
     */

  }, {
    key: 'addRemoveRestaurantFavorite',
    value: function addRemoveRestaurantFavorite(restaurant, isFav) {
      fetch(DBHelper.DATABASE_URL + '/restaurants/' + restaurant.id + '/?is_favorite=' + isFav, {
        method: 'put'
      }).then(function (data) {
        console.log('Favorite restaurant added: ', data);
      });
    }
  }, {
    key: 'DATABASE_URL',


    /**
     * Database URL.
     * Change this to restaurants.json file location on your server.
     */
    get: function get() {
      return 'https://sdm-restaurant-review.herokuapp.com';
    }
  }]);

  return DBHelper;
}();

(function () {
  function toArray(arr) {
    return Array.prototype.slice.call(arr);
  }

  function promisifyRequest(request) {
    return new Promise(function (resolve, reject) {
      request.onsuccess = function () {
        resolve(request.result);
      };

      request.onerror = function () {
        reject(request.error);
      };
    });
  }

  function promisifyRequestCall(obj, method, args) {
    var request;
    var p = new Promise(function (resolve, reject) {
      request = obj[method].apply(obj, args);
      promisifyRequest(request).then(resolve, reject);
    });

    p.request = request;
    return p;
  }

  function promisifyCursorRequestCall(obj, method, args) {
    var p = promisifyRequestCall(obj, method, args);
    return p.then(function (value) {
      if (!value) return;
      return new Cursor(value, p.request);
    });
  }

  function proxyProperties(ProxyClass, targetProp, properties) {
    properties.forEach(function (prop) {
      Object.defineProperty(ProxyClass.prototype, prop, {
        get: function get() {
          return this[targetProp][prop];
        },
        set: function set(val) {
          this[targetProp][prop] = val;
        }
      });
    });
  }

  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function (prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function () {
        return promisifyRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function (prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function () {
        return this[targetProp][prop].apply(this[targetProp], arguments);
      };
    });
  }

  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function (prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function () {
        return promisifyCursorRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function Index(index) {
    this._index = index;
  }

  proxyProperties(Index, '_index', ['name', 'keyPath', 'multiEntry', 'unique']);

  proxyRequestMethods(Index, '_index', IDBIndex, ['get', 'getKey', 'getAll', 'getAllKeys', 'count']);

  proxyCursorRequestMethods(Index, '_index', IDBIndex, ['openCursor', 'openKeyCursor']);

  function Cursor(cursor, request) {
    this._cursor = cursor;
    this._request = request;
  }

  proxyProperties(Cursor, '_cursor', ['direction', 'key', 'primaryKey', 'value']);

  proxyRequestMethods(Cursor, '_cursor', IDBCursor, ['update', 'delete']);

  // proxy 'next' methods
  ['advance', 'continue', 'continuePrimaryKey'].forEach(function (methodName) {
    if (!(methodName in IDBCursor.prototype)) return;
    Cursor.prototype[methodName] = function () {
      var cursor = this;
      var args = arguments;
      return Promise.resolve().then(function () {
        cursor._cursor[methodName].apply(cursor._cursor, args);
        return promisifyRequest(cursor._request).then(function (value) {
          if (!value) return;
          return new Cursor(value, cursor._request);
        });
      });
    };
  });

  function ObjectStore(store) {
    this._store = store;
  }

  ObjectStore.prototype.createIndex = function () {
    return new Index(this._store.createIndex.apply(this._store, arguments));
  };

  ObjectStore.prototype.index = function () {
    return new Index(this._store.index.apply(this._store, arguments));
  };

  proxyProperties(ObjectStore, '_store', ['name', 'keyPath', 'indexNames', 'autoIncrement']);

  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, ['put', 'add', 'delete', 'clear', 'get', 'getAll', 'getKey', 'getAllKeys', 'count']);

  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, ['openCursor', 'openKeyCursor']);

  proxyMethods(ObjectStore, '_store', IDBObjectStore, ['deleteIndex']);

  function Transaction(idbTransaction) {
    this._tx = idbTransaction;
    this.complete = new Promise(function (resolve, reject) {
      idbTransaction.oncomplete = function () {
        resolve();
      };
      idbTransaction.onerror = function () {
        reject(idbTransaction.error);
      };
      idbTransaction.onabort = function () {
        reject(idbTransaction.error);
      };
    });
  }

  Transaction.prototype.objectStore = function () {
    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
  };

  proxyProperties(Transaction, '_tx', ['objectStoreNames', 'mode']);

  proxyMethods(Transaction, '_tx', IDBTransaction, ['abort']);

  function UpgradeDB(db, oldVersion, transaction) {
    this._db = db;
    this.oldVersion = oldVersion;
    this.transaction = new Transaction(transaction);
  }

  UpgradeDB.prototype.createObjectStore = function () {
    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
  };

  proxyProperties(UpgradeDB, '_db', ['name', 'version', 'objectStoreNames']);

  proxyMethods(UpgradeDB, '_db', IDBDatabase, ['deleteObjectStore', 'close']);

  function DB(db) {
    this._db = db;
  }

  DB.prototype.transaction = function () {
    return new Transaction(this._db.transaction.apply(this._db, arguments));
  };

  proxyProperties(DB, '_db', ['name', 'version', 'objectStoreNames']);

  proxyMethods(DB, '_db', IDBDatabase, ['close']);

  // Add cursor iterators
  // TODO: remove this once browsers do the right thing with promises
  ['openCursor', 'openKeyCursor'].forEach(function (funcName) {
    [ObjectStore, Index].forEach(function (Constructor) {
      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
      if (!(funcName in Constructor.prototype)) return;

      Constructor.prototype[funcName.replace('open', 'iterate')] = function () {
        var args = toArray(arguments);
        var callback = args[args.length - 1];
        var nativeObject = this._store || this._index;
        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
        request.onsuccess = function () {
          callback(request.result);
        };
      };
    });
  });

  // polyfill getAll
  [Index, ObjectStore].forEach(function (Constructor) {
    if (Constructor.prototype.getAll) return;
    Constructor.prototype.getAll = function (query, count) {
      var instance = this;
      var items = [];

      return new Promise(function (resolve) {
        instance.iterateCursor(query, function (cursor) {
          if (!cursor) {
            resolve(items);
            return;
          }
          items.push(cursor.value);

          if (count !== undefined && items.length == count) {
            resolve(items);
            return;
          }
          cursor.continue();
        });
      });
    };
  });

  var exp = {
    open: function open(name, version, upgradeCallback) {
      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
      var request = p.request;

      if (request) {
        request.onupgradeneeded = function (event) {
          if (upgradeCallback) {
            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
          }
        };
      }

      return p.then(function (db) {
        return new DB(db);
      });
    },
    delete: function _delete(name) {
      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
    }
  };

  if (typeof module !== 'undefined') {
    module.exports = exp;
    module.exports.default = module.exports;
  } else {
    self.idb = exp;
  }
})();
var restaurants = void 0;
var neighborhoods = void 0;
var cuisines = void 0;
var map = void 0;
var markers = [];
var home = window.location.pathname === '/';

/**
 * Fetch neighborhoods and cuisines as soon as the page is loaded.
 */
document.addEventListener('DOMContentLoaded', function (event) {
  fetchNeighborhoods();
  fetchCuisines();
  registerServiceWorker();
  setTimeout(function () {
    if (document.querySelector('.loader').style.display !== 'none') {
      var loadingMsg = document.createElement('span');
      loadingMsg.innerText = 'This may take a few seconds';
      document.querySelector('.loader').appendChild(loadingMsg);
    }
  }, 1000);
});

/**
 * Add title to maps iframe.
 */
window.addEventListener('load', function () {
  document.querySelectorAll('iframe')[0].title = 'Restaurant map';
});

/**
 * Register Service Worker.
 */
registerServiceWorker = function registerServiceWorker() {
  if (!navigator.serviceWorker) return;

  navigator.serviceWorker.register('/sw.js').then(function () {
    console.log('Service worked registered!');
  }).catch(function (err) {
    console.log('Registration failed!');
  });
};

/**
 * Fetch all neighborhoods and set their HTML.
 */
fetchNeighborhoods = function fetchNeighborhoods() {
  DBHelper.fetchNeighborhoods(function (error, neighborhoods) {
    if (error) {
      // Got an error
      console.error(error);
    } else {
      self.neighborhoods = neighborhoods;
      fillNeighborhoodsHTML();
    }
  });
};

/**
 * Set neighborhoods HTML.
 */
fillNeighborhoodsHTML = function fillNeighborhoodsHTML() {
  var neighborhoods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.neighborhoods;

  var select = document.getElementById('neighborhoods-select');
  neighborhoods.forEach(function (neighborhood) {
    var option = document.createElement('option');
    option.innerHTML = neighborhood;
    option.value = neighborhood;
    if (home) select.append(option);
  });
  document.querySelector('.loader').style.display = 'none';
};

/**
 * Fetch all cuisines and set their HTML.
 */
fetchCuisines = function fetchCuisines() {
  DBHelper.fetchCuisines(function (error, cuisines) {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      self.cuisines = cuisines;
      fillCuisinesHTML();
    }
  });
};

/**
 * Set cuisines HTML.
 */
fillCuisinesHTML = function fillCuisinesHTML() {
  var cuisines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cuisines;

  var select = document.getElementById('cuisines-select');

  cuisines.forEach(function (cuisine) {
    var option = document.createElement('option');
    option.innerHTML = cuisine;
    option.value = cuisine;
    if (home) select.append(option);
  });
};

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = function () {
  var loc = {
    lat: 40.722216,
    lng: -73.987501
  };
  self.map = new google.maps.Map(document.querySelector('.map'), {
    zoom: 12,
    center: loc,
    scrollwheel: false
  });
  updateRestaurants();
};

/**
 * Update page and map for current restaurants.
 */
updateRestaurants = function updateRestaurants() {
  var cSelect = document.getElementById('cuisines-select');
  var nSelect = document.getElementById('neighborhoods-select');

  var cIndex = cSelect.selectedIndex;
  var nIndex = nSelect.selectedIndex;

  var cuisine = cSelect[cIndex].value;
  var neighborhood = nSelect[nIndex].value;

  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, function (error, restaurants) {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      resetRestaurants(restaurants);
      fillRestaurantsHTML();
    }
  });
};

/**
 * Add event listeners for filter dropdowns.
 */
if (document.getElementById('neighborhoods-select')) {
  document.getElementById('neighborhoods-select').addEventListener('change', function () {
    updateRestaurants();
  });
}

if (document.getElementById('cuisines-select')) {
  document.getElementById('cuisines-select').addEventListener('change', function () {
    updateRestaurants();
  });
}

/**
 * Clear current restaurants, their HTML and remove their map markers.
 */
resetRestaurants = function resetRestaurants(restaurants) {
  // Remove all restaurants
  self.restaurants = [];
  var ul = document.querySelector('.restaurants-list');
  ul.innerHTML = '';

  // Remove all map markers
  // self.markers.forEach(m => m.setMap(null));
  self.markers = [];
  self.restaurants = restaurants;
};

/**
 * Create all restaurants HTML and add them to the webpage.
 */
fillRestaurantsHTML = function fillRestaurantsHTML() {
  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;

  var ul = document.querySelector('.restaurants-list');
  restaurants.forEach(function (restaurant) {
    ul.append(createRestaurantHTML(restaurant));
  });
  addMarkersToMap();
};

/**
 * Create restaurant HTML...
 */
createRestaurantHTML = function createRestaurantHTML(restaurant) {
  var li = document.createElement('li');
  var container = document.createElement('div');
  var picture = document.createElement('picture');
  var sourceLg = document.createElement('source');
  var sourceSm = document.createElement('source');
  var image = document.createElement('img');

  sourceLg.className = 'restaurant-img';
  sourceLg.alt = restaurant.name;
  sourceLg.media = "(min-width: 500px)";
  sourceLg.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'lg');
  picture.append(sourceLg);

  sourceSm.className = 'restaurant-img';
  sourceSm.alt = restaurant.name;
  sourceSm.media = "(max-width: 500px)";
  sourceSm.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'sm');
  picture.append(sourceSm);

  image.className = 'restaurant-img';
  image.alt = restaurant.name;
  image.src = DBHelper.imageUrlForRestaurant(restaurant, 'lg');
  picture.append(image);

  li.append(picture);

  var name = document.createElement('h1');
  name.innerHTML = restaurant.name;
  container.append(name);

  if (restaurant.is_favorite == 'true') {
    name.innerHTML += ' ♥';
  }

  var neighborhood = document.createElement('p');
  neighborhood.innerHTML = restaurant.neighborhood;
  neighborhood.classList += 'neighborhood';
  container.append(neighborhood);

  var address = document.createElement('p');
  address.innerHTML = restaurant.address;
  container.append(address);

  var more = document.createElement('a');
  more.innerHTML = 'View Details';
  more.setAttribute('aria-label', restaurant.name);
  more.classList += 'btn';
  more.href = DBHelper.urlForRestaurant(restaurant);
  container.append(more);

  li.append(container);

  return li;
};

/**
 * Add markers for current restaurants to the map.
 */
addMarkersToMap = function addMarkersToMap() {
  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;

  restaurants.forEach(function (restaurant) {
    // Add marker to the map
    var marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);
    google.maps.event.addListener(marker, 'click', function () {
      window.location.href = marker.url;
    });
    self.markers.push(marker);
  });
};

var restaurant = void 0;
var mapInfo = void 0;
var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

/**
 * Initialize Google map, called from HTML.
 */
if (window.location.pathname === '/restaurant.html') {
  window.initMap = function () {
    fetchRestaurantFromURL(function (error, restaurant) {
      if (error) {
        // Got an error!
        console.error(error);
      } else {
        self.mapInfo = new google.maps.Map(document.querySelector('.map'), {
          zoom: 16,
          center: restaurant.latlng,
          scrollwheel: false
        });
        fillBreadcrumb();
        DBHelper.mapMarkerForRestaurant(self.restaurant, self.mapInfo);
      }
    });
  };
}

/**
 * Get current restaurant from page URL.
 */
fetchRestaurantFromURL = function fetchRestaurantFromURL(callback) {
  if (self.restaurant) {
    // restaurant already fetched!
    callback(null, self.restaurant);
    return;
  }
  var id = getParameterByName('id');
  if (!id) {
    // no id found in URL
    error = 'No restaurant id in URL';
    callback(error, null);
  } else {
    DBHelper.fetchRestaurantById(id, function (error, restaurant) {
      self.restaurant = restaurant;
      if (!restaurant) {
        console.error(error);
        return;
      }
      fillRestaurantHTML();
      callback(null, restaurant);
    });
  }
};

/**
 * Returns heart element
 */
buildHeart = function buildHeart() {
  var heart = document.createElement('span');
  heart.textContent = " ♥";
  heart.classList += 'heart';

  return heart;
};

/**
 * Create restaurant HTML and add it to the webpage
 */
fillRestaurantHTML = function fillRestaurantHTML() {
  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

  var name = document.querySelector('.restaurant-name');
  if (restaurant.is_favorite == 'true') {
    name.innerHTML = restaurant.name;
    name.appendChild(buildHeart());
    document.querySelector('.remove-fav').style.display = 'inline';
    document.querySelector('.add-fav').style.display = 'none';
  } else {
    name.innerHTML = restaurant.name;
    document.querySelector('.remove-fav').style.display = 'none';
    document.querySelector('.add-fav').style.display = 'inline';
  }

  var address = document.querySelector('.restaurant-address span');
  address.innerHTML = restaurant.address;

  var sourceLg = document.createElement('source');
  var sourceSm = document.createElement('source');
  var defaultImg = document.createElement('img');
  var image = document.querySelector('.restaurant-img');

  sourceLg.className = 'restaurant-img';
  sourceLg.alt = restaurant.name;
  sourceLg.media = "(min-width: 500px)";
  sourceLg.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'lg');
  image.append(sourceLg);

  sourceSm.className = 'restaurant-img';
  sourceSm.alt = restaurant.name;
  sourceSm.media = "(max-width: 500px)";
  sourceSm.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'sm');
  image.append(sourceSm);

  defaultImg.className = 'restaurant-img';
  defaultImg.alt = restaurant.name;
  defaultImg.src = DBHelper.imageUrlForRestaurant(restaurant, 'lg');
  image.append(defaultImg);

  var cuisine = document.querySelector('.restaurant-cuisine');
  cuisine.innerHTML = restaurant.cuisine_type;

  // fill operating hours
  if (restaurant.operating_hours) {
    fillRestaurantHoursHTML();
  }
  // fill reviews
  fillReviewsHTML();
};

/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */
fillRestaurantHoursHTML = function fillRestaurantHoursHTML() {
  var operatingHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.operating_hours;

  var hours = document.querySelector('.restaurant-hours');
  for (var key in operatingHours) {
    var row = document.createElement('tr');

    var day = document.createElement('td');
    day.innerHTML = key;
    row.appendChild(day);

    var time = document.createElement('td');
    time.innerHTML = operatingHours[key];
    row.appendChild(time);

    hours.appendChild(row);
  }
};

/**
 * Fetch all reviews and add them to the webpage.
 */
fillReviewsHTML = function fillReviewsHTML() {
  DBHelper.fetchRestaurantReviews(self.restaurant.id, function (err, reviews) {
    var container = document.querySelector('.reviews-container div');

    if (!reviews) {
      var noReviews = document.createElement('p');
      noReviews.innerHTML = 'No reviews yet!';
      container.appendChild(noReviews);
      return;
    }

    var ul = document.querySelector('.reviews-list');

    reviews.forEach(function (review) {
      ul.appendChild(createReviewHTML(review));
    });

    container.appendChild(ul);
  });
};

/**
 * Create review HTML and add it to the webpage.
 */
createReviewHTML = function createReviewHTML(review) {
  var li = document.createElement('li');
  var name = document.createElement('p');
  var reviewDate = new Date(review.createdAt);
  var stars = "";

  name.innerHTML = review.name;
  name.classList += 'review-name';
  li.appendChild(name);

  var date = document.createElement('div');

  date.innerHTML = months[reviewDate.getMonth()] + ' ' + reviewDate.getDate() + ', ' + reviewDate.getFullYear();
  date.classList += 'date';
  li.appendChild(date);

  var rating = document.createElement('p');
  rating.classList += 'gold-star';

  for (var star = 0; star < parseInt(review.rating); star++) {
    stars += "★";
  }

  rating.innerHTML = '' + stars;
  li.appendChild(rating);

  var comments = document.createElement('p');
  comments.innerHTML = review.comments;
  li.appendChild(comments);

  return li;
};

/**
 * Add restaurant name to the breadcrumb navigation menu
 */
fillBreadcrumb = function fillBreadcrumb() {
  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

  var breadcrumb = document.querySelector('.breadcrumb');
  var li = document.createElement('li');
  li.innerHTML = restaurant.name;
  breadcrumb.appendChild(li);
};

/**
 * Get a parameter by name from page URL.
 */
getParameterByName = function getParameterByName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
};

/**
 * Get review from form.
 */
getReviewFormData = function getReviewFormData(callback) {
  var name = document.querySelector('input[name="name"]').value;
  var rating = document.querySelector('input[name="rating"]').value;
  var comments = document.querySelector('textarea[name="comments"]').value;

  callback(null, { name: name, rating: rating, comments: comments });
};

/**
 * Highlight all stars gold before and including star that is clicked. Mark
 * all stars after clicked star black.
 */
(function () {
  var stars = document.querySelectorAll('.star-container .star');
  var ratingInput = document.querySelector('input[name="rating"]');
  stars.forEach(function (star, index) {
    if (star.style.color === "" || _this.style.color === "#000") {
      star.addEventListener('click', function () {
        ratingInput.value = star.getAttribute('data-rating');
        for (var gold = index; gold >= 0; gold--) {
          stars[gold].style.color = "gold";
        }

        for (var black = index + 1; black < stars.length; black++) {
          stars[black].style.color = "#000";
        }
      });
    } else {
      _this.style.color = "#000";
    }
  });
})();

if (document.querySelector('.add-review')) {
  /**
   * Show review form
   */
  document.querySelector('.add-review').addEventListener('click', function () {
    document.querySelector('.reviews-container form').classList.toggle('hide');
  });

  /**
   * Submit review
   */
  document.querySelector('.submit-review').addEventListener('click', function (e) {
    e.preventDefault();

    fetchRestaurantFromURL(function (err, restaurant) {
      getReviewFormData(function (err, data) {
        if (data.name !== "" && data.rating !== "" && data.comments !== "") {
          DBHelper.addRestaurantReview(restaurant, data.name, data.rating, data.comments);
        } else {
          alert("Please fill in all review form fields.");
        }
      });
    });
  });

  /**
   * Update server with offline reviews
   */
  window.addEventListener('online', function () {
    DBHelper.uploadOfflineReviews();
  });

  /**
   * Add favorite restaurant
   */
  document.querySelector('.add-fav').addEventListener('click', function (e) {
    e.preventDefault();

    document.querySelector('.remove-fav').style.display = 'inline';
    document.querySelector('.add-fav').style.display = 'none';

    document.querySelector('.restaurant-name').append(buildHeart());

    fetchRestaurantFromURL(function (err, restaurant) {
      DBHelper.addRemoveRestaurantFavorite(restaurant, true);
    });
  });

  /**
   * Add favorite restaurant
   */
  document.querySelector('.remove-fav').addEventListener('click', function (e) {
    e.preventDefault();

    document.querySelector('.add-fav').style.display = 'inline';
    document.querySelector('.remove-fav').style.display = 'none';
    document.querySelector('.heart').remove();

    fetchRestaurantFromURL(function (err, restaurant) {
      DBHelper.addRemoveRestaurantFavorite(restaurant, false);
    });
  });

  document.querySelector('.remove-fav').addEventListener('click', function (e) {
    e.preventDefault();

    document.querySelector('.add-fav').style.display = 'inline';
    document.querySelector('.remove-fav').style.display = 'none';
    document.querySelector('.heart').remove();

    fetchRestaurantFromURL(function (err, restaurant) {
      DBHelper.addRemoveRestaurantFavorite(restaurant, false);
    });
  });
}